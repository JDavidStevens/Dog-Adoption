{"version":3,"sources":["Pet.js","Results.js"],"names":["Pet","React","Component","props","name","animal","breed","media","location","id","photos","photo","filter","hero","value","petfinder","key","secret","Results","search","pet","find","output","searchParams","then","data","pets","Array","isArray","setState","state","map","breeds","join","contact","city","ResultsWithContext","context"],"mappings":"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","file":"Results.b134b810.map","sourceRoot":"..\\src","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nclass Pet extends React.Component {\r\n  render() {\r\n    const { name, animal, breed, media, location, id } = this.props;\r\n\r\n    let photos = [];\r\n\r\n    if (media && media.photos && media.photos.photo) {\r\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\r\n    }\r\n\r\n    const hero = photos[0] ? photos[0].value : \"http://placecorgi.com/300/300\"\r\n    return (\r\n      <Link to={`details/${id}`} className=\"pet\">\r\n        <div className=\"image-container\">\r\n          <img src={hero} alt={name} />\r\n        </div>\r\n        <div className=\"info\">\r\n          <h1>{name}</h1>\r\n          <h2>\r\n            {animal}-{breed}-{location}\r\n          </h2>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pet;\r\n","import React from \"react\";\r\nimport pf from \"petfinder-client\";\r\nimport { Consumer } from \"./SearchContext\";\r\nimport Pet from \"./Pet\";\r\nimport SearchBox from \"./SearchBox\";\r\n\r\nconst petfinder = pf({\r\n  key: process.env.REACT_APP_API_KEY,\r\n  secret: process.env.REACT_APP_API_SECRET\r\n});\r\n\r\nclass Results extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pets: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.search();\r\n  }\r\n  search = () => {\r\n    petfinder.pet\r\n      .find({\r\n        output: \"full\",\r\n        location: this.props.searchParams.location,\r\n        animal: this.props.searchParams.animal,\r\n        breed: this.props.searchParams.breed\r\n      })\r\n      .then(data => {\r\n        let pets;\r\n        if (data.petfinder.pets && data.petfinder.pets.pet) {\r\n          if (Array.isArray(data.petfinder.pets.pet)) {\r\n            pets = data.petfinder.pets.pet;\r\n          } else {\r\n            pets = [data.petfinder.pets.pet];\r\n          }\r\n        } else {\r\n          pets = [];\r\n        }\r\n\r\n        this.setState({ pets });\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <SearchBox search={this.search}/>\r\n        {this.state.pets.map(pet => {\r\n          let breed;\r\n\r\n          if (Array.isArray(pet.breeds.breed)) {\r\n            breed = pet.breeds.breed.join(\", \");\r\n          } else {\r\n            breed = pet.breeds.breed;\r\n          }\r\n\r\n          return (\r\n            <Pet\r\n              key={pet.id}\r\n              animal={pet.animal}\r\n              name={pet.name}\r\n              breed={breed}\r\n              media={pet.media}\r\n              location={`${pet.contact.city}, ${pet.contact.state}`}\r\n              id={pet.id}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function ResultsWithContext(props) {\r\n  return (\r\n    <Consumer>\r\n      {context => <Results {...props} searchParams={context} />}\r\n    </Consumer>\r\n  );\r\n}\r\n"]}